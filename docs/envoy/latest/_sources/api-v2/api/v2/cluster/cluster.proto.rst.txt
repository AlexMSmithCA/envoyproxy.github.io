.. _envoy_api_file_envoy/api/v2/cluster/cluster.proto:

Clusters
========


.. _envoy_api_msg_cluster.Cluster:

cluster.Cluster
---------------

`[cluster.Cluster proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L23>`_


.. code-block:: json

  {
    "name": "...",
    "type": "...",
    "eds_cluster_config": "{...}",
    "connect_timeout": "{...}",
    "per_connection_buffer_limit_bytes": "{...}",
    "lb_policy": "...",
    "hosts": [],
    "health_checks": [],
    "max_requests_per_connection": "{...}",
    "circuit_breakers": "{...}",
    "tls_context": "{...}",
    "http_protocol_options": "{...}",
    "http2_protocol_options": "{...}",
    "dns_refresh_rate": "{...}",
    "dns_lookup_family": "...",
    "dns_resolvers": [],
    "outlier_detection": "{...}",
    "cleanup_interval": "{...}",
    "upstream_bind_config": "{...}",
    "lb_subset_config": "{...}",
    "ring_hash_lb_config": "{...}",
    "transport_socket": "{...}",
    "metadata": "{...}",
    "protocol_selection": "..."
  }

.. _envoy_api_field_cluster.Cluster.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Supplies the name of the cluster which must be unique across all clusters.
  The cluster name is used when emitting
  :ref:`statistics <config_cluster_manager_cluster_stats>`.
  Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics.
  By default, the maximum length of a cluster name is limited to 60
  characters. This limit can be increased by setting the
  :option:`--max-obj-name-len` command line argument to the desired value.
  
  
.. _envoy_api_field_cluster.Cluster.type:

type
  (:ref:`cluster.Cluster.DiscoveryType <envoy_api_enum_cluster.Cluster.DiscoveryType>`) The :ref:`service discovery type <arch_overview_service_discovery_types>`
  to use for resolving the cluster.
  
  
.. _envoy_api_field_cluster.Cluster.eds_cluster_config:

eds_cluster_config
  (:ref:`cluster.Cluster.EdsClusterConfig <envoy_api_msg_cluster.Cluster.EdsClusterConfig>`) Configuration to use for EDS updates for the Cluster.
  
  
.. _envoy_api_field_cluster.Cluster.connect_timeout:

connect_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The timeout for new network connections to hosts in the cluster.
  
  
.. _envoy_api_field_cluster.Cluster.per_connection_buffer_limit_bytes:

per_connection_buffer_limit_bytes
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Soft limit on size of the cluster’s connections read and write buffers. If
  unspecified, an implementation defined default is applied (1MiB).
  
  
.. _envoy_api_field_cluster.Cluster.lb_policy:

lb_policy
  (:ref:`cluster.Cluster.LbPolicy <envoy_api_enum_cluster.Cluster.LbPolicy>`) The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
  when picking a host in the cluster.
  
  
.. _envoy_api_field_cluster.Cluster.hosts:

hosts
  (:ref:`Address <envoy_api_msg_Address>`) If the service discovery type is
  :ref:`STATIC<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STATIC>`,
  :ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>`
  or :ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`,
  then hosts is required.
  
  
.. _envoy_api_field_cluster.Cluster.health_checks:

health_checks
  (:ref:`HealthCheck <envoy_api_msg_HealthCheck>`) Optional :ref:`active health checking <arch_overview_health_checking>`
  configuration for the cluster. If no
  configuration is specified no health checking will be done and all cluster
  members will be considered healthy at all times.
  
  
.. _envoy_api_field_cluster.Cluster.max_requests_per_connection:

max_requests_per_connection
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Optional maximum requests for a single upstream connection. This parameter
  is respected by both the HTTP/1.1 and HTTP/2 connection pool
  implementations. If not specified, there is no limit. Setting this
  parameter to 1 will effectively disable keep alive.
  
  
.. _envoy_api_field_cluster.Cluster.circuit_breakers:

circuit_breakers
  (:ref:`cluster.CircuitBreakers <envoy_api_msg_cluster.CircuitBreakers>`) Optional :ref:`circuit breaking <arch_overview_circuit_break>` for the cluster.
  
  
.. _envoy_api_field_cluster.Cluster.tls_context:

tls_context
  (:ref:`auth.UpstreamTlsContext <envoy_api_msg_auth.UpstreamTlsContext>`) The TLS configuration for connections to the upstream cluster. If no TLS
  configuration is specified, TLS will not be used for new connections.
  
  .. attention::
  
    Server certificate verification is not enabled by default. Configure
    :ref:`trusted_ca<envoy_api_field_auth.CertificateValidationContext.trusted_ca>` to enable
    verification.
  
  
.. _envoy_api_field_cluster.Cluster.http_protocol_options:

http_protocol_options
  (:ref:`Http1ProtocolOptions <envoy_api_msg_Http1ProtocolOptions>`) Additional options when handling HTTP1 requests.
  
  
.. _envoy_api_field_cluster.Cluster.http2_protocol_options:

http2_protocol_options
  (:ref:`Http2ProtocolOptions <envoy_api_msg_Http2ProtocolOptions>`) Even if default HTTP2 protocol options are desired, this field must be
  set so that Envoy will assume that the upstream supports HTTP/2 when
  making new HTTP connection pool connections. Currently, Envoy only
  supports prior knowledge for upstream connections. Even if TLS is used
  with ALPN, `http2_protocol_options` must be specified. As an aside this allows HTTP/2
  connections to happen over plain text.
  
  
.. _envoy_api_field_cluster.Cluster.dns_refresh_rate:

dns_refresh_rate
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) If the DNS refresh rate is specified and the cluster type is either
  :ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>`,
  or :ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`,
  this value is used as the cluster’s DNS refresh
  rate. If this setting is not specified, the value defaults to 5000. For
  cluster types other than
  :ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>`
  and :ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`
  this setting is ignored.
  
  
.. _envoy_api_field_cluster.Cluster.dns_lookup_family:

dns_lookup_family
  (:ref:`cluster.Cluster.DnsLookupFamily <envoy_api_enum_cluster.Cluster.DnsLookupFamily>`) The DNS IP address resolution policy. If this setting is not specified, the
  value defaults to
  :ref:`AUTO<envoy_api_enum_value_cluster.Cluster.DnsLookupFamily.AUTO>`.
  
  
.. _envoy_api_field_cluster.Cluster.dns_resolvers:

dns_resolvers
  (:ref:`Address <envoy_api_msg_Address>`) If DNS resolvers are specified and the cluster type is either
  :ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>`,
  or :ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`,
  this value is used to specify the cluster’s dns resolvers.
  If this setting is not specified, the value defaults to the default
  resolver, which uses /etc/resolv.conf for configuration. For cluster types
  other than
  :ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>`
  and :ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`
  this setting is ignored.
  
  
.. _envoy_api_field_cluster.Cluster.outlier_detection:

outlier_detection
  (:ref:`cluster.OutlierDetection <envoy_api_msg_cluster.OutlierDetection>`) If specified, outlier detection will be enabled for this upstream cluster.
  Each of the configuration values can be overridden via
  :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`.
  
  
.. _envoy_api_field_cluster.Cluster.cleanup_interval:

cleanup_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The interval for removing stale hosts from a cluster type
  :ref:`ORIGINAL_DST<envoy_api_enum_value_cluster.Cluster.DiscoveryType.ORIGINAL_DST>`.
  Hosts are considered stale if they have not been used
  as upstream destinations during this interval. New hosts are added
  to original destination clusters on demand as new connections are
  redirected to Envoy, causing the number of hosts in the cluster to
  grow over time. Hosts that are not stale (they are actively used as
  destinations) are kept in the cluster, which allows connections to
  them remain open, saving the latency that would otherwise be spent
  on opening new connections. If this setting is not specified, the
  value defaults to 5000ms. For cluster types other than
  :ref:`ORIGINAL_DST<envoy_api_enum_value_cluster.Cluster.DiscoveryType.ORIGINAL_DST>`
  this setting is ignored.
  
  
.. _envoy_api_field_cluster.Cluster.upstream_bind_config:

upstream_bind_config
  (:ref:`BindConfig <envoy_api_msg_BindConfig>`) Optional configuration used to bind newly established upstream connections.
  This overrides any bind_config specified in the bootstrap proto.
  If the addres and port are empty, no bind will be performed.
  
  
.. _envoy_api_field_cluster.Cluster.lb_subset_config:

lb_subset_config
  (:ref:`cluster.Cluster.LbSubsetConfig <envoy_api_msg_cluster.Cluster.LbSubsetConfig>`) Configuration for load balancing subsetting.
  
  
.. _envoy_api_field_cluster.Cluster.ring_hash_lb_config:

ring_hash_lb_config
  (:ref:`cluster.Cluster.RingHashLbConfig <envoy_api_msg_cluster.Cluster.RingHashLbConfig>`) Optional configuration for the Ring Hash load balancing policy.
  
  
  Only one of :ref:`ring_hash_lb_config <envoy_api_field_cluster.Cluster.ring_hash_lb_config>` may be set.
  
.. _envoy_api_field_cluster.Cluster.transport_socket:

transport_socket
  (:ref:`TransportSocket <envoy_api_msg_TransportSocket>`) See :ref:`base.TransportSocket<envoy_api_msg_TransportSocket>` description.
  
  
.. _envoy_api_field_cluster.Cluster.metadata:

metadata
  (:ref:`Metadata <envoy_api_msg_Metadata>`) The Metadata field can be used to provide additional information about the
  cluster. It can be used for stats, logging, and varying filter behavior.
  Fields should use reverse DNS notation to denote which entity within Envoy
  will need the information. For instance, if the metadata is intended for
  the Router filter, the filter name should be specified as *envoy.router*.
  
  
.. _envoy_api_field_cluster.Cluster.protocol_selection:

protocol_selection
  (:ref:`cluster.Cluster.ClusterProtocolSelection <envoy_api_enum_cluster.Cluster.ClusterProtocolSelection>`) 
  
.. _envoy_api_msg_cluster.Cluster.EdsClusterConfig:

cluster.Cluster.EdsClusterConfig
--------------------------------

`[cluster.Cluster.EdsClusterConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L64>`_

Only valid when discovery type is EDS.

.. code-block:: json

  {
    "eds_config": "{...}",
    "service_name": "..."
  }

.. _envoy_api_field_cluster.Cluster.EdsClusterConfig.eds_config:

eds_config
  (:ref:`ConfigSource <envoy_api_msg_ConfigSource>`) Configuration for the source of EDS updates for this Cluster.
  
  
.. _envoy_api_field_cluster.Cluster.EdsClusterConfig.service_name:

service_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional alternative to cluster name to present to EDS. This does not
  have the same restrictions as cluster name, i.e. it may be arbitrary
  length.
  
  


.. _envoy_api_msg_cluster.Cluster.LbSubsetConfig:

cluster.Cluster.LbSubsetConfig
------------------------------

`[cluster.Cluster.LbSubsetConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L240>`_

Optionally divide the endpoints in this cluster into subsets defined by
endpoint metadata and selected by route and weighted cluster metadata.

.. code-block:: json

  {
    "fallback_policy": "...",
    "default_subset": "{...}",
    "subset_selectors": []
  }

.. _envoy_api_field_cluster.Cluster.LbSubsetConfig.fallback_policy:

fallback_policy
  (:ref:`cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy <envoy_api_enum_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy>`) The behavior used when no endpoint subset matches the selected route's
  metadata. The value defaults to
  :ref:`NO_FALLBACK<envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
  
  
.. _envoy_api_field_cluster.Cluster.LbSubsetConfig.default_subset:

default_subset
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Specifies the default subset of endpoints used during fallback if
  fallback_policy is
  :ref:`DEFAULT_SUBSET<envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.
  Each field in default_subset is
  compared to the matching LbEndpoint.Metadata under the *envoy.lb*
  namespace. It is valid for no hosts to match, in which case the behavior
  is the same as a fallback_policy of
  :ref:`NO_FALLBACK<envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
  
  
.. _envoy_api_field_cluster.Cluster.LbSubsetConfig.subset_selectors:

subset_selectors
  (:ref:`cluster.Cluster.LbSubsetConfig.LbSubsetSelector <envoy_api_msg_cluster.Cluster.LbSubsetConfig.LbSubsetSelector>`) For each entry, LbEndpoint.Metadata's
  *envoy.lb* namespace is traversed and a subset is created for each unique
  combination of key and value. For example:
  
  .. code-block:: json
  
    { "subset_selectors": [
        { "keys": [ "version" ] },
        { "keys": [ "stage", "hardware_type" ] }
    ]}
  
  A subset is matched when the metadata from the selected route and
  weighted cluster contains the same keys and values as the subset's
  metadata. The same host may appear in multiple subsets.
  
  
.. _envoy_api_msg_cluster.Cluster.LbSubsetConfig.LbSubsetSelector:

cluster.Cluster.LbSubsetConfig.LbSubsetSelector
-----------------------------------------------

`[cluster.Cluster.LbSubsetConfig.LbSubsetSelector proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L269>`_

Specifications for subsets.

.. code-block:: json

  {
    "keys": []
  }

.. _envoy_api_field_cluster.Cluster.LbSubsetConfig.LbSubsetSelector.keys:

keys
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) List of keys to match with the weighted cluster metadata.
  
  


.. _envoy_api_enum_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy:

Enum cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy
----------------------------------------------------------

`[cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L247>`_

If NO_FALLBACK is selected, a result
equivalent to no healthy hosts is reported. If ANY_ENDPOINT is selected,
any cluster endpoint may be returned (subject to policy, health checks,
etc). If DEFAULT_SUBSET is selected, load balancing is performed over the
endpoints matching the values from the default_subset field.

.. _envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK:

NO_FALLBACK
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.ANY_ENDPOINT:

ANY_ENDPOINT
  ⁣
  
.. _envoy_api_enum_value_cluster.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET:

DEFAULT_SUBSET
  ⁣
  

.. _envoy_api_msg_cluster.Cluster.RingHashLbConfig:

cluster.Cluster.RingHashLbConfig
--------------------------------

`[cluster.Cluster.RingHashLbConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L296>`_

Specific configuration for the :ref:`RingHash<arch_overview_load_balancing_types_ring_hash>`
load balancing policy.

.. code-block:: json

  {
    "minimum_ring_size": "{...}",
    "deprecated_v1": "{...}"
  }

.. _envoy_api_field_cluster.Cluster.RingHashLbConfig.minimum_ring_size:

minimum_ring_size
  (`UInt64Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint64value>`_) Minimum hash ring size, i.e. total virtual nodes. A larger size
  will provide better request distribution since each host in the
  cluster will have more virtual nodes. Defaults to 1024. In the case
  that total number of hosts is greater than the minimum, each host will
  be allocated a single virtual node.
  
  
.. _envoy_api_field_cluster.Cluster.RingHashLbConfig.deprecated_v1:

deprecated_v1
  (:ref:`cluster.Cluster.RingHashLbConfig.DeprecatedV1 <envoy_api_msg_cluster.Cluster.RingHashLbConfig.DeprecatedV1>`) Deprecated settings from v1 config.
  
  
.. _envoy_api_msg_cluster.Cluster.RingHashLbConfig.DeprecatedV1:

cluster.Cluster.RingHashLbConfig.DeprecatedV1
---------------------------------------------

`[cluster.Cluster.RingHashLbConfig.DeprecatedV1 proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L304>`_


.. code-block:: json

  {
    "use_std_hash": "{...}"
  }

.. _envoy_api_field_cluster.Cluster.RingHashLbConfig.DeprecatedV1.use_std_hash:

use_std_hash
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Defaults to true, meaning that std::hash is used to hash hosts onto
  the ketama ring. std::hash can vary by platform. For this reason,
  Envoy will eventually use `xxHash <https://github.com/Cyan4973/xxHash>`_
  by default. This field exists for
  migration purposes and will eventually be deprecated. Set it to false
  to use `xxHash <https://github.com/Cyan4973/xxHash>`_ now.
  
  



.. _envoy_api_enum_cluster.Cluster.DiscoveryType:

Enum cluster.Cluster.DiscoveryType
----------------------------------

`[cluster.Cluster.DiscoveryType proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L35>`_

Refer to :ref:`service discovery type <arch_overview_service_discovery_types>`
for an explanation on each type.

.. _envoy_api_enum_value_cluster.Cluster.DiscoveryType.STATIC:

STATIC
  *(DEFAULT)* ⁣Refer to the :ref:`static discovery type<arch_overview_service_discovery_types_static>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS:

STRICT_DNS
  ⁣Refer to the :ref:`strict DNS discovery
  type<arch_overview_service_discovery_types_strict_dns>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS:

LOGICAL_DNS
  ⁣Refer to the :ref:`logical DNS discovery
  type<arch_overview_service_discovery_types_logical_dns>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.DiscoveryType.EDS:

EDS
  ⁣Refer to the :ref:`service discovery type<arch_overview_service_discovery_types_sds>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.DiscoveryType.ORIGINAL_DST:

ORIGINAL_DST
  ⁣Refer to the :ref:`original destination discovery
  type<arch_overview_service_discovery_types_original_destination>`
  for an explanation.
  
  

.. _envoy_api_enum_cluster.Cluster.LbPolicy:

Enum cluster.Cluster.LbPolicy
-----------------------------

`[cluster.Cluster.LbPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L89>`_

Refer to :ref:`load balancer type <arch_overview_load_balancing_types>` architecture
overview section for information on each type.

.. _envoy_api_enum_value_cluster.Cluster.LbPolicy.ROUND_ROBIN:

ROUND_ROBIN
  *(DEFAULT)* ⁣Refer to the :ref:`round robin load balancing
  policy<arch_overview_load_balancing_types_round_robin>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.LbPolicy.LEAST_REQUEST:

LEAST_REQUEST
  ⁣Refer to the :ref:`least request load balancing
  policy<arch_overview_load_balancing_types_least_request>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.LbPolicy.RING_HASH:

RING_HASH
  ⁣Refer to the :ref:`ring hash load balancing
  policy<arch_overview_load_balancing_types_ring_hash>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.LbPolicy.RANDOM:

RANDOM
  ⁣Refer to the :ref:`random load balancing
  policy<arch_overview_load_balancing_types_random>`
  for an explanation.
  
  
.. _envoy_api_enum_value_cluster.Cluster.LbPolicy.ORIGINAL_DST_LB:

ORIGINAL_DST_LB
  ⁣Refer to the :ref:`original destination load balancing
  policy<arch_overview_load_balancing_types_original_destination>`
  for an explanation.
  
  

.. _envoy_api_enum_cluster.Cluster.DnsLookupFamily:

Enum cluster.Cluster.DnsLookupFamily
------------------------------------

`[cluster.Cluster.DnsLookupFamily proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L189>`_

When V4_ONLY is selected, the DNS resolver will only perform a lookup for
addresses in the IPv4 family. If V6_ONLY is selected, the DNS resolver will
only perform a lookup for addresses in the IPv6 family. If AUTO is
specified, the DNS resolver will first perform a lookup for addresses in
the IPv6 family and fallback to a lookup for addresses in the IPv4 family.
For cluster types other than
:ref:`STRICT_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.STRICT_DNS>` and
:ref:`LOGICAL_DNS<envoy_api_enum_value_cluster.Cluster.DiscoveryType.LOGICAL_DNS>`,
this setting is
ignored.

.. _envoy_api_enum_value_cluster.Cluster.DnsLookupFamily.AUTO:

AUTO
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_cluster.Cluster.DnsLookupFamily.V4_ONLY:

V4_ONLY
  ⁣
  
.. _envoy_api_enum_value_cluster.Cluster.DnsLookupFamily.V6_ONLY:

V6_ONLY
  ⁣
  

.. _envoy_api_enum_cluster.Cluster.ClusterProtocolSelection:

Enum cluster.Cluster.ClusterProtocolSelection
---------------------------------------------

`[cluster.Cluster.ClusterProtocolSelection proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L339>`_


.. _envoy_api_enum_value_cluster.Cluster.ClusterProtocolSelection.USE_CONFIGURED_PROTOCOL:

USE_CONFIGURED_PROTOCOL
  *(DEFAULT)* ⁣Cluster can only operate on one of the possible upstream protocols (HTTP1.1, HTTP2).
  If :ref:`http2_protocol_options <envoy_api_field_cluster.Cluster.http2_protocol_options>` are
  present, HTTP2 will be used, otherwise HTTP1.1 will be used.
  
  
.. _envoy_api_enum_value_cluster.Cluster.ClusterProtocolSelection.USE_DOWNSTREAM_PROTOCOL:

USE_DOWNSTREAM_PROTOCOL
  ⁣Use HTTP1.1 or HTTP2, depending on which one is used on the downstream connection.
  
  

.. _envoy_api_msg_cluster.UpstreamBindConfig:

cluster.UpstreamBindConfig
--------------------------

`[cluster.UpstreamBindConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cluster/cluster.proto#L352>`_

An extensible structure containing the address Envoy should bind to when
establishing upstream connections.

.. code-block:: json

  {
    "source_address": "{...}"
  }

.. _envoy_api_field_cluster.UpstreamBindConfig.source_address:

source_address
  (:ref:`Address <envoy_api_msg_Address>`) The address Envoy should bind to when establishing upstream connections.
  
  

