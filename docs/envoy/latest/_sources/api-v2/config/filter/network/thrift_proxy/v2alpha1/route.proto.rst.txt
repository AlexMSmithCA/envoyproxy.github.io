.. _envoy_api_file_envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto:

Thrift Proxy Route Configuration
================================

Thrift Proxy :ref:`configuration overview <config_network_filters_thrift_proxy>`.

.. _envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration:

config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration
--------------------------------------------------------------

`[config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto#L13>`_


.. code-block:: json

  {
    "name": "...",
    "routes": []
  }

.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the route configuration. Reserved for future use in asynchronous route discovery.
  
  
.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration.routes:

routes
  (:ref:`config.filter.network.thrift_proxy.v2alpha1.Route <envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.Route>`) The list of routes that will be matched, in order, against incoming requests. The first route
  that matches will be used.
  
  


.. _envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.Route:

config.filter.network.thrift_proxy.v2alpha1.Route
-------------------------------------------------

`[config.filter.network.thrift_proxy.v2alpha1.Route proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto#L23>`_


.. code-block:: json

  {
    "match": "{...}",
    "route": "{...}"
  }

.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.Route.match:

match
  (:ref:`config.filter.network.thrift_proxy.v2alpha1.RouteMatch <envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.RouteMatch>`, *REQUIRED*) Route matching prarameters.
  
  
.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.Route.route:

route
  (:ref:`config.filter.network.thrift_proxy.v2alpha1.RouteAction <envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.RouteAction>`, *REQUIRED*) Route request to some upstream cluster.
  
  


.. _envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.RouteMatch:

config.filter.network.thrift_proxy.v2alpha1.RouteMatch
------------------------------------------------------

`[config.filter.network.thrift_proxy.v2alpha1.RouteMatch proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto#L32>`_


.. code-block:: json

  {
    "method_name": "...",
    "service_name": "...",
    "invert": "...",
    "headers": []
  }

.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name:

method_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, the route must exactly match the request method name. As a special case, an
  empty string matches any request method name.
  
  
  Precisely one of :ref:`method_name <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>`, :ref:`service_name <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` must be set.
  
.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name:

service_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, the route must have the service name as the request method name prefix. As a
  special case, an empty string matches any service name. Only relevant when service
  multiplexing.
  
  
  Precisely one of :ref:`method_name <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>`, :ref:`service_name <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` must be set.
  
.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.invert:

invert
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Inverts whatever matching is done in the :ref:`method_name
  <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>` or
  :ref:`service_name
  <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` fields.
  Cannot be combined with wildcard matching as that would result in routes never being matched.
  
  .. note::
  
    This does not invert matching done as part of the :ref:`headers field
    <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers>` field. To
    invert header matching, see :ref:`invert_match
    <envoy_api_field_route.HeaderMatcher.invert_match>`.
  
  
.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers:

headers
  (:ref:`route.HeaderMatcher <envoy_api_msg_route.HeaderMatcher>`) Specifies a set of headers that the route should match on. The router will check the requestâ€™s
  headers against all the specified headers in the route config. A match will happen if all the
  headers in the route are present in the request with the same values (or based on presence if
  the value field is not in the config). Note that this only applies for Thrift transports and/or
  protocols that support headers.
  
  


.. _envoy_api_msg_config.filter.network.thrift_proxy.v2alpha1.RouteAction:

config.filter.network.thrift_proxy.v2alpha1.RouteAction
-------------------------------------------------------

`[config.filter.network.thrift_proxy.v2alpha1.RouteAction proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto#L69>`_


.. code-block:: json

  {
    "cluster": "..."
  }

.. _envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteAction.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Indicates the upstream cluster to which the request should be routed.
  
  

