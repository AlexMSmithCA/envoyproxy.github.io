api/filter/http/http_connection_manager.proto
=============================================

.. _envoy_api_msg_filter.http.Rds:

filter.http.Rds
---------------


.. code-block:: json

  {
    "config_source": "{...}",
    "route_config_name": "..."
  }

.. _envoy_api_field_filter.http.Rds.config_source:

config_source
  (:ref:`ConfigSource <envoy_api_msg_ConfigSource>`) Configuration source specifier for RDS.
  
  
.. _envoy_api_field_filter.http.Rds.route_config_name:

route_config_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the route configuration. This name will be passed to the RDS
  API. This allows an Envoy configuration with multiple HTTP listeners (and
  associated HTTP connection manager filters) to use different route
  configurations.
  
  


.. _envoy_api_msg_filter.http.HttpFilter:

filter.http.HttpFilter
----------------------


.. code-block:: json

  {
    "name": "...",
    "config": "{...}",
    "deprecated_v1": "{...}"
  }

.. _envoy_api_field_filter.http.HttpFilter.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the filter to instantiate. The name must match a supported
  filter.
  
  
.. _envoy_api_field_filter.http.HttpFilter.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Filter specific configuration which depends on the filter being
  instantiated. See the supported filters for further documentation.
  
  
.. _envoy_api_field_filter.http.HttpFilter.deprecated_v1:

deprecated_v1
  (:ref:`filter.http.HttpFilter.DeprecatedV1 <envoy_api_msg_filter.http.HttpFilter.DeprecatedV1>`) 
  
.. _envoy_api_msg_filter.http.HttpFilter.DeprecatedV1:

filter.http.HttpFilter.DeprecatedV1
-----------------------------------


.. code-block:: json

  {
    "type": "..."
  }

.. _envoy_api_field_filter.http.HttpFilter.DeprecatedV1.type:

type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) 
  



.. _envoy_api_msg_filter.http.HttpConnectionManager:

filter.http.HttpConnectionManager
---------------------------------


.. code-block:: json

  {
    "codec_type": "...",
    "stat_prefix": "...",
    "rds": "{...}",
    "route_config": "{...}",
    "http_filters": [],
    "add_user_agent": "{...}",
    "tracing": "{...}",
    "http_protocol_options": "{...}",
    "http2_protocol_options": "{...}",
    "server_name": "...",
    "idle_timeout": "{...}",
    "drain_timeout": "{...}",
    "access_log": [],
    "use_remote_address": "{...}",
    "generate_request_id": "{...}",
    "forward_client_cert_details": "...",
    "set_current_client_cert_details": "{...}"
  }

.. _envoy_api_field_filter.http.HttpConnectionManager.codec_type:

codec_type
  (:ref:`filter.http.HttpConnectionManager.CodecType <envoy_api_enum_filter.http.HttpConnectionManager.CodecType>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The human readable prefix to use when emitting statistics for the
  connection manager. See the statistics documentation for more information.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.rds:

rds
  (:ref:`filter.http.Rds <envoy_api_msg_filter.http.Rds>`) The connection manager’s route table will be dynamically loaded via the
  RDS API
  
  
  Only one of rds, route_config may be set.
  
.. _envoy_api_field_filter.http.HttpConnectionManager.route_config:

route_config
  (:ref:`RouteConfiguration <envoy_api_msg_RouteConfiguration>`) The route table for the connection manager is static and is specified in
  this property.
  
  
  Only one of rds, route_config may be set.
  
.. _envoy_api_field_filter.http.HttpConnectionManager.http_filters:

http_filters
  (:ref:`filter.http.HttpFilter <envoy_api_msg_filter.http.HttpFilter>`) A list of individual HTTP filters that make up the filter chain for
  requests made to the connection manager. Order matters as the filters are
  processed sequentially as request events happen.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.add_user_agent:

add_user_agent
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager manipulates the user-agent and
  x-envoy-downstream-service-cluster headers. See the linked documentation
  for more information. Defaults to false.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.tracing:

tracing
  (:ref:`filter.http.HttpConnectionManager.Tracing <envoy_api_msg_filter.http.HttpConnectionManager.Tracing>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.http_protocol_options:

http_protocol_options
  (:ref:`Http1ProtocolOptions <envoy_api_msg_Http1ProtocolOptions>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.http2_protocol_options:

http2_protocol_options
  (:ref:`Http2ProtocolOptions <envoy_api_msg_Http2ProtocolOptions>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.server_name:

server_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional override that the connection manager will write to the server
  header in responses. If not set, the default is envoy.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.idle_timeout:

idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The idle timeout for connections managed by the connection manager. The
  idle timeout is defined as the period in which there are no active
  requests. If not set, there is no idle timeout. When the idle timeout is
  reached the connection will be closed. If the connection is an HTTP/2
  connection a drain sequence will occur prior to closing the connection. See
  drain_timeout.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.drain_timeout:

drain_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The time that Envoy will wait between sending an HTTP/2 “shutdown
  notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
  This is used so that Envoy provides a grace period for new streams that
  race with the final GOAWAY frame. During this grace period, Envoy will
  continue to accept new streams. After the grace period, a final GOAWAY
  frame is sent and Envoy will start refusing new streams. Draining occurs
  both when a connection hits the idle timeout or during general server
  draining. The default grace period is 5000 milliseconds (5 seconds) if this
  option is not specified.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.access_log:

access_log
  (:ref:`filter.AccessLog <envoy_api_msg_filter.AccessLog>`) Configuration for HTTP access logs emitted by the connection manager.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.use_remote_address:

use_remote_address
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If set to true, the connection manager will use the real remote address of
  the client connection when determining internal versus external origin and
  manipulating various headers. If set to false or absent, the connection
  manager will use the x-forwarded-for HTTP header. See the documentation for
  x-forwarded-for, x-envoy-internal, and x-envoy-external-address for more
  information.
  TODO(mattklein123): Clean this up, see also discussion in
  https://github.com/lyft/envoy/issues/794.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.generate_request_id:

generate_request_id
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager will generate the x-request-id header if it
  does not exist. This defaults to true. Generating a random UUID4 is
  expensive so in high throughput scenarios where this feature is not desired
  it can be disabled.
  
  
.. _envoy_api_field_filter.http.HttpConnectionManager.forward_client_cert_details:

forward_client_cert_details
  (:ref:`filter.http.HttpConnectionManager.ForwardClientCertDetails <envoy_api_enum_filter.http.HttpConnectionManager.ForwardClientCertDetails>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.set_current_client_cert_details:

set_current_client_cert_details
  (:ref:`filter.http.HttpConnectionManager.SetCurrentClientCertDetails <envoy_api_msg_filter.http.HttpConnectionManager.SetCurrentClientCertDetails>`) 
  
.. _envoy_api_msg_filter.http.HttpConnectionManager.Tracing:

filter.http.HttpConnectionManager.Tracing
-----------------------------------------


.. code-block:: json

  {
    "operation_name": "...",
    "request_headers_for_tags": []
  }

.. _envoy_api_field_filter.http.HttpConnectionManager.Tracing.operation_name:

operation_name
  (:ref:`filter.http.HttpConnectionManager.Tracing.OperationName <envoy_api_enum_filter.http.HttpConnectionManager.Tracing.OperationName>`) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.Tracing.request_headers_for_tags:

request_headers_for_tags
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The header name is used to populate the tag name, and the header value is
  used to populate the tag value. The tag is created if the specified
  header name is present in the request’s headers.
  
  

.. _envoy_api_enum_filter.http.HttpConnectionManager.Tracing.OperationName:

Enum filter.http.HttpConnectionManager.Tracing.OperationName
------------------------------------------------------------

Span name will be derived from operation_name.

.. _envoy_api_enum_value_filter.http.HttpConnectionManager.Tracing.OperationName.INGRESS:

INGRESS
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.Tracing.OperationName.EGRESS:

EGRESS
  ⁣
  

.. _envoy_api_msg_filter.http.HttpConnectionManager.SetCurrentClientCertDetails:

filter.http.HttpConnectionManager.SetCurrentClientCertDetails
-------------------------------------------------------------

This field is valid only when forward_client_cert is append_forward or
sanitize_set and the client connection is mTLS. It specifies the fields in
the client certificate to be forwarded. Note that in the
x-forwarded-client-cert header, Hash is always set, and By is always set
when the client certificate presents the SAN value.

.. code-block:: json

  {
    "subject": "{...}",
    "san": "{...}"
  }

.. _envoy_api_field_filter.http.HttpConnectionManager.SetCurrentClientCertDetails.subject:

subject
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) 
  
.. _envoy_api_field_filter.http.HttpConnectionManager.SetCurrentClientCertDetails.san:

san
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) 
  


.. _envoy_api_enum_filter.http.HttpConnectionManager.CodecType:

Enum filter.http.HttpConnectionManager.CodecType
------------------------------------------------


.. _envoy_api_enum_value_filter.http.HttpConnectionManager.CodecType.AUTO:

AUTO
  *(DEFAULT)* ⁣For every new connection, the connection manager will determine which
  codec to use. This mode supports both ALPN for TLS listeners as well as
  protocol inference for plaintext listeners. If ALPN data is available, it
  is preferred, otherwise protocol inference is used. In almost all cases,
  this is the right option to choose for this setting.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.CodecType.HTTP1:

HTTP1
  ⁣The connection manager will assume that the client is speaking HTTP/1.1.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.CodecType.HTTP2:

HTTP2
  ⁣The connection manager will assume that the client is speaking HTTP/2
  (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
  Prior knowledge is allowed).
  
  

.. _envoy_api_enum_filter.http.HttpConnectionManager.ForwardClientCertDetails:

Enum filter.http.HttpConnectionManager.ForwardClientCertDetails
---------------------------------------------------------------

How to handle the x-forwarded-client-cert (XFCC) HTTP header.

.. _envoy_api_enum_value_filter.http.HttpConnectionManager.ForwardClientCertDetails.SANITIZE:

SANITIZE
  *(DEFAULT)* ⁣Do not send the XFCC header to the next hop. This is the default value.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.ForwardClientCertDetails.FORWARD_ONLY:

FORWARD_ONLY
  ⁣When the client connection is mTLS (Mutual TLS), forward the XFCC header
  in the request.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.ForwardClientCertDetails.APPEND_FORWARD:

APPEND_FORWARD
  ⁣When the client connection is mTLS, append the client certificate
  information to the request’s XFCC header and forward it.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.ForwardClientCertDetails.SANITIZE_SET:

SANITIZE_SET
  ⁣When the client connection is mTLS, reset the XFCC header with the client
  certificate information and send it to the next hop.
  
  
.. _envoy_api_enum_value_filter.http.HttpConnectionManager.ForwardClientCertDetails.ALWAYS_FORWARD_ONLY:

ALWAYS_FORWARD_ONLY
  ⁣Always forward the XFCC header in the request, regardless of whether the
  client connection is mTLS.
  
  
