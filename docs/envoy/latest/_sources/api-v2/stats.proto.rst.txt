.. _envoy_api_file_api/stats.proto:

Stats
=====

Protos for stats related messages.

.. _envoy_api_msg_StatsSink:

StatsSink
---------

`[StatsSink proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/stats.proto#L15>`_

Configuration for pluggable stats sinks.

.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_StatsSink.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the stats sink to instantiate. The name must match a supported
  stats sink. *envoy.statsd* is a built-in sink suitable for emitting to
  `statsd <https://github.com/etsy/statsd>`_. Any other built-in stats sink
  can be found in `well_known_names.h
  <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
  in the Envoy repository.
  
  
.. _envoy_api_field_StatsSink.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Stats sink specific configuration which depends on the sink being
  instantiated. See :ref:`StatsdSink <envoy_api_msg_StatsdSink>` for an
  example.
  
  


.. _envoy_api_msg_StatsConfig:

StatsConfig
-----------

`[StatsConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/stats.proto#L31>`_

Statistics :ref:`architecture overview <arch_overview_statistics>`.

.. code-block:: json

  {
    "stats_tags": [],
    "use_all_default_tags": "{...}"
  }

.. _envoy_api_field_StatsConfig.stats_tags:

stats_tags
  (:ref:`TagSpecifier <envoy_api_msg_TagSpecifier>`) Each stat name is iteratively processed through these tag specifiers.
  When a tag is matched, the first capture group is removed from the name so
  later :ref:`TagSpecifiers <envoy_api_msg_TagSpecifier>` cannot match that
  same portion of the match.
  
  
.. _envoy_api_field_StatsConfig.use_all_default_tags:

use_all_default_tags
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Use all default tag regexes specified in Envoy. These can be combined with
  custom tags specified in :ref:`stats_tags
  <envoy_api_field_StatsConfig.stats_tags>`. They will be processed before
  the custom tags.
  
  .. note::
  
    If any default tags are specified twice, the config will be considered
    invalid.
  
  See `well_known_names.h
  <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
  for a list of the default tags in Envoy.
  
  If not provided, the value is assumed to be true.
  
  


.. _envoy_api_msg_TagSpecifier:

TagSpecifier
------------

`[TagSpecifier proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/stats.proto#L59>`_

Designates a tag to strip from the tag extracted name and provide as a named
tag value for all statistics. This will only occur if any part of the name
matches the regex provided with one or more capture groups.

.. code-block:: json

  {
    "tag_name": "...",
    "regex": "..."
  }

.. _envoy_api_field_TagSpecifier.tag_name:

tag_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Attaches an identifier to the tag values to identify the tag being in the
  sink. Envoy has a set of default names and regexes to extract dynamic
  portions of existing stats, which can be found in `well_known_names.h
  <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
  in the Envoy repository. If a :ref:`tag_name
  <envoy_api_field_TagSpecifier.tag_name>` is provided in the config with an
  empty regex, Envoy will attempt to find that name in its set of defaults
  and use the accompanying regex.
  
  .. note::
  
    If any default tags are specified twice, the config will be considered
    invalid.
  
  
.. _envoy_api_field_TagSpecifier.regex:

regex
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The first capture group identifies the portion of the name to remove. The
  second capture group (which will normally be nested inside the first) will
  designate the value of the tag for the statistic. If no second capture
  group is provided, the first will also be used to set the value of the tag.
  All other capture groups will be ignored.
  
  Take for example, with a stat name ``cluster.foo_cluster.upstream_rq_timeout``
  and
  
  .. code-block:: json
  
    {
      "tag_name": "envoy.cluster_name",
      "regex": "^cluster\.((.+?)\.)"
    }
  
  Note that the regex will remove ``foo_cluster.`` making the tag extracted
  name ``cluster.upstream_rq_timeout`` and the tag value for
  ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
  ``.`` character because of the second capture group).
  
  An example with two regexes and stat name
  ``http.connection_manager_1.user_agent.ios.downstream_cx_total``:
  
  .. code-block:: json
  
    [
      {
        "tag_name": "envoy.http_user_agent",
        "regex": "^http(?=\.).*?\.user_agent\.((.+?)\.)\w+?$"
      },
      {
        "tag_name": "envoy.http_conn_manager_prefix",
        "regex": "^http\.((.*?)\.)"
      }
    ]
  
  The first regex will remove ``ios.``, leaving the tag extracted name
  ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
  ``envoy.http_user_agent`` will be added with tag value ``ios``.
  
  The second regex will remove ``connection_manager_1.`` from the tag
  extracted name produced by the first regex
  ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
  ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
  ``envoy.http_conn_manager_prefix`` will be added with the tag value
  ``connection_manager_1``.
  
  


.. _envoy_api_msg_StatsdSink:

StatsdSink
----------

`[StatsdSink proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/stats.proto#L126>`_

Stats configuration proto schema for built-in *envoy.statsd* sink.

.. code-block:: json

  {
    "address": "{...}",
    "tcp_cluster_name": "..."
  }

.. _envoy_api_field_StatsdSink.address:

address
  (:ref:`Address <envoy_api_msg_Address>`) The UDP address of a running `statsd <https://github.com/etsy/statsd>`_
  compliant listener. If specified, statistics will be flushed to this
  address.
  
  
  Precisely one of :ref:`address <envoy_api_field_StatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_StatsdSink.tcp_cluster_name>` must be set.
  
.. _envoy_api_field_StatsdSink.tcp_cluster_name:

tcp_cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of a cluster that is running a TCP `statsd
  <https://github.com/etsy/statsd>`_ compliant listener. If specified,
  Envoy will connect to this cluster to flush statistics.
  
  
  Precisely one of :ref:`address <envoy_api_field_StatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_StatsdSink.tcp_cluster_name>` must be set.
  


.. _envoy_api_msg_DogStatsdSink:

DogStatsdSink
-------------

`[DogStatsdSink proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/stats.proto#L145>`_

Stats configuration proto schema for built-in *envoy.dog_statsd* sink.
The sink emits stats with `DogStatsD <https://docs.datadoghq.com/guides/dogstatsd/>`_
compatible tags. Tags are configurable via :ref:`StatsConfig <envoy_api_msg_StatsConfig>`.

.. code-block:: json

  {
    "address": "{...}",
    "tcp_cluster_name": "..."
  }

.. _envoy_api_field_DogStatsdSink.address:

address
  (:ref:`Address <envoy_api_msg_Address>`) The UDP address of a running DogStatsD compliant listener. If specified,
  statistics will be flushed to this address.
  
  
  Precisely one of :ref:`address <envoy_api_field_DogStatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_DogStatsdSink.tcp_cluster_name>` must be set.
  
.. _envoy_api_field_DogStatsdSink.tcp_cluster_name:

tcp_cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of a cluster that is DogStatsD compliant TCP listener. If specified,
  Envoy will connect to this cluster to flush statistics.
  
  
  Precisely one of :ref:`address <envoy_api_field_DogStatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_DogStatsdSink.tcp_cluster_name>` must be set.
  

